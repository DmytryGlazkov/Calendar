// Generated by CoffeeScript 1.6.3
(function() {
  Calendar.DateController = Ember.ObjectController.extend({
    currentDay: new Date().getDate(),
    currentMonth: new Date().getMonth() + 1,
    currentYear: new Date().getFullYear(),
    getDays: (function() {
      var currentDate, day, days, daysInMonth, daysInPrevMonth, endDay, i, nowDate, selectedDate, startDay, _i, _j, _k, _ref, _ref1;
      console.log(this.get('currentDay') + '/' + this.get('currentMonth' + '/' + this.get('currentYear')));
      nowDate = new Date();
      currentDate = new Date(this.get('currentYear'), this.get('currentMonth') - 1, this.get('currentDay'));
      selectedDate = new Date(this.get('selectedYear'), this.get('selectedMonth') - 1, this.get('selectedDay'));
      daysInMonth = 32 - new Date(this.get('currentYear'), this.get('currentMonth') - 1, 32).getDate();
      daysInPrevMonth = 32 - new Date(this.get('currentYear'), this.get('currentMonth') - 2, 32).getDate();
      startDay = new Date(this.get('currentYear'), this.get('currentMonth') - 1, 0).getDay();
      endDay = new Date(this.get('currentYear'), this.get('currentMonth'), 0).getDay();
      days = [];
      for (i = _i = _ref = startDay - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        day = new Object;
        this.checkDate(selectedDate, new Date(this.get('currentYear'), this.get('currentMonth') - 2, daysInPrevMonth - i), day, 'anotherDay');
        day.dayNum = daysInPrevMonth - i;
        days.push(day);
      }
      for (i = _j = 1; 1 <= daysInMonth ? _j <= daysInMonth : _j >= daysInMonth; i = 1 <= daysInMonth ? ++_j : --_j) {
        day = new Object;
        this.checkDate(selectedDate, new Date(this.get('currentYear'), this.get('currentMonth') - 1, i), day, 'dayInMonth');
        day.dayNum = i;
        days.push(day);
      }
      for (i = _k = 1, _ref1 = 7 - endDay; 1 <= _ref1 ? _k <= _ref1 : _k >= _ref1; i = 1 <= _ref1 ? ++_k : --_k) {
        day = new Object;
        this.checkDate(selectedDate, new Date(this.get('currentYear'), this.get('currentMonth'), i), day, 'anotherDay');
        day.dayNum = i;
        days.push(day);
      }
      return [days.slice(0, 7), days.slice(7, 14), days.slice(14, 21), days.slice(21, 28), days.slice(28, 35), days.length > 35 ? days.slice(35, +(days.length - 1) + 1 || 9e9) : void 0];
    }).property('selectedDay', 'selectedMonth', 'selectedYear'),
    checkDate: function(selected, current, day, defaultClass) {
      var now, nowDate;
      now = new Date();
      nowDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      if (current.getTime() === nowDate.getTime()) {
        return day.dayClass = 'now';
      } else {
        if (current.getTime() === selected.getTime()) {
          return day.dayClass = 'selected';
        } else {
          return day.dayClass = defaultClass;
        }
      }
    }
  });

}).call(this);
